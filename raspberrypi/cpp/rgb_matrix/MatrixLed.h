//
// Created by hyde on 19/06/22.
//

#ifndef RGB_MATRIXLED_H
#define RGB_MATRIXLED_H

#include <linux/i2c-dev.h>
#include <i2c/smbus.h>
#include <vector>

#define CONFIGURE_CMD_PAGE 0xFD
#define FRAME1_PAGE 0x00
#define FRAME2_PAGE 0x01
#define FUNCTION_PAGE 0x0B
#define DETECTION_PAGE 0x0C
#define LED_VAF_PAGE 0x0D

#define CONFIGURATION_REG 0x00
#define PICTURE_DISPLAY_REG 0x01
#define DISPLAY_OPTION_REG 0x05
#define BREATH_CTL_REG 0x08
#define BREATH_CTL_REG2 0x09
#define SW_SHUT_DOWN_REG 0x0A

#define AUDIO_GAIN_CTL_REG 0x0B
#define STAGGERED_DELAY_REG 0x0D
#define SLEW_RATE_CTL_REG 0x0E
#define CURRENT_CTL_REG 0x0F
#define VAF_CTL_REG 0x14
#define VAF_CTL_REG2 0x15

#define MSKSTD1 (0x3<<0)
#define MSKSTD2 (0x3<<2)
#define MSKSTD3 (0x3<<4)
#define MSKSTD4 (0x3<<6)
#define CONST_STD_GROUP1 0x00
#define CONST_STD_GROUP2 0x55
#define CONST_STD_GROUP3 0xAA
#define CONST_STD_GROUP4 0xFF

#define MSKVAF1 (0x4<<0)
#define MSKVAF2 (0x4<<4)
#define MSKVAF3 (0x4<<0)
#define MSKFORCEVAFTIME_CONST (0x0<<3)
#define MSKFORCEVAFCTL_ALWAYSON (0x0<<6)
#define MSKFORCEVAFCTL_DISABLE (0x2<<6)
#define MSKCURRENT_CTL_EN (0x1<<7)
#define CONST_CURRENT_STEP_20mA (0x19<<0)
#define mskBLINK_FRAME_300 (0x0<<6)
#define mskBLINK_EN (0x1<<3)
#define mskBLINK_DIS (0x0<<3)
#define mskBLINK_PERIOD_TIME_CONST (0x7<<0)

#define RGB_MATRIX_ADDRESS   0x74



const __u8 tabLED_Type3Vaf [64] ={
    //Reference SLED1735 Datasheet Type3 Circuit Map
    //Frame 1
    0x50, 0x55, 0x55, 0x55, //C1-A ~ C1-P
    0x00, 0x00, 0x00, 0x00, //C2-A ~ C2-P
    0x00, 0x00, 0x00, 0x00, //C3-A ~ C3-P
    0x15, 0x54, 0x55, 0x55, //C4-A ~ C4-P
    0x00, 0x00, 0x00, 0x00, //C5-A ~ C5-P
    0x00, 0x00, 0x00, 0x00, //C6-A ~ C6-P
    0x55, 0x05, 0x55, 0x55, //C7-A ~ C7-P
    0x00, 0x00, 0x00, 0x00, //C8-A ~ C8-P
    //Frame 2
    0x00, 0x00, 0x00, 0x00, //C9-A ~ C9-P
    0x55, 0x55, 0x41, 0x55, //C10-A ~ C10-P
    0x00, 0x00, 0x00, 0x00, //C11-A ~ C11-P
    0x00, 0x00, 0x00, 0x00, //C12-A ~ C12-P
    0x55, 0x55, 0x55, 0x50, //C13-A ~ C13-P
    0x00, 0x00, 0x00, 0x00, //C14-A ~ C14-P
    0x00, 0x00, 0x00, 0x00, //C15-A ~ C15-P
    0x00, 0x00, 0x00, 0x00, //C16-A ~ C16-P
};

//Table Index means the number of LED, and the data of table means PWM control ram address                              
const __u8 tabLED_Type3PWMCTLAnodeRed[70] = { 
    //Reference SLED1735 Datasheet Type3 Map
    0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, // Red D1~D14 PWM CTL Mapping address
    0x50, 0x51, 0x52, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, // Red D15~D28 PWM CTL Mapping address
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, // Red D29~D42 PWM CTL Mapping address
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, // Red D43~D56 PWM CTL Mapping address
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6E, 0x6F, // Red D57~D70 PWM CTL Mapping address
};              

//Table Index means the number of LED, and the data of table means PWM control ram address                                  
const __u8 tabLED_Type3PWMCTLAnodeGreen[70] = { 
    //Reference SLED1735 Datasheet Type3 Map
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, // Green D1~D14 PWM CTL Mapping address
    0x60, 0x61, 0x62, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, // Green D15~D28 PWM CTL Mapping address
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, // Green D29~D42 PWM CTL Mapping address
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, // Green D43~D56 PWM CTL Mapping address
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7E, 0x7F, // Green D57~D70 PWM CTL Mapping address
};                              

//Table Index means the number of LED, and the data of table means PWM control ram address                                  
const __u8 tabLED_Type3PWMCTLAnodeBlue[70] = { 
    //Reference SLED1735 Datasheet Type3 Map
    0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, // Blue D1~D14 PWM CTL Mapping address
    0x70, 0x71, 0x72, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, // Blue D15~D28 PWM CTL Mapping address
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, // Blue D29~D42 PWM CTL Mapping address
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, // Blue D43~D56 PWM CTL Mapping address
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8E, 0x8F, // Blue D57~D70 PWM CTL Mapping address
};





class MatrixLed {
public:
    MatrixLed(int addr): _addr(addr){};
    ~MatrixLed();
    bool Open();
    bool Close();
    bool Init();
    bool ShowImage();
    bool DrawPoint(__u8 coor[2], __u8 R,__u8 G,__u8 B);
    bool DrawLine(const __u8 coor[4], __u8 R,__u8 G,__u8 B);
    
    bool ShowHex(const __u8     * hex, __u8 R, __u8 G, __u8 B);
    bool Read();

private:
    int _fd = 0;
    int _addr = 0;
    __u8 rgb_test [64][3] = {0};
    bool WriteCmd(const __u8 cmd, const __u8 reg);
    bool Write_NData(const __u8 startRegister, const __u8 data, const __u8 length);
    bool WriteArrayData(const __u8 startRegister, const __u8 data[64], const __u8 length);

};


#endif //RGB_MATRIXLED_H
